devtools::load_all()
devtools::document()
# devtools::create(path = "/home/gabriel/suporte/ciencia_de_dados/projeto/ElasticFantasticR/elasticR")
require(dplyr)
credential_realties <-
es.credential(
user = "normalizador",
passwd = "ND2SjGE+41E=@",
find_search = "search", # I need to find a reason
database =  "mapi.digital",
table =  "realties"
)
es.connection(credential_realties) %>%
.$status
# elasticR::extract.query()
elasticR::es.alldata(
credential  = credential_realties,
size = 100
)
devtools::load_all()
devtools::document()
# devtools::create(path = "/home/gabriel/suporte/ciencia_de_dados/projeto/ElasticFantasticR/elasticR")
require(dplyr)
credential_realties <-
es.credential(
user = "normalizador",
passwd = "ND2SjGE+41E=@",
find_search = "search", # I need to find a reason
database =  "mapi.digital",
table =  "realties"
)
es.connection(credential_realties) %>%
.$status
# elasticR::extract.query()
elasticR::es.alldata(
credential  = credential_realties,
size = 100
)
extract.query <- function(es_credential,
es_query){
es.credential()
es_request <-
httr::POST(
url = es_credential,
body = es_query,
httr::timeout(10000),
encode = "raw", # this lets' httr do the work for you
httr::content_type_json(), # easier than making a header yourself
httr::verbose()
)
list_cont <- httr::content(es_request, as = "text")
es_data <- jsonlite::fromJSON(list_cont)
return(es_data)
}
es.alldata <- function(credential, size){
query <-
paste0('{
"size": ', size, ',
"query": {
"match_all": {}
}
}
}')
list_cont <- extract.query(credential, query)
data_extract <- list_cont$hits$hits$`_source`
return(data_extract)
}
# size = 1000
query <-
paste0('{
"size": ', size, ',
"query": {
"match_all": {}
}
}
}')
query <-
paste0('{
"size": ', size, ',
"query": {
"match_all": {}
}
}
}')
size = 1000
# size = 1000
query <-
paste0('{
"size": ', size, ',
"query": {
"match_all": {}
}
}
}')
credential_realties
# credential = credential_realties
# size = 1000
query <-
paste0('{
"size": ', size, ',
"query": {
"match_all": {}
}
}
}')
credential = credential_realties
list_cont <- extract.query(credential, query)
credential
query
es_request <-
httr::POST(
url = es_credential,
body = es_query,
httr::timeout(10000),
encode = "raw", # this lets' httr do the work for you
httr::content_type_json(), # easier than making a header yourself
httr::verbose()
)
es_query = query
# es_query = query
es_request <-
httr::POST(
url = es_credential,
body = es_query,
httr::timeout(10000),
encode = "raw", # this lets' httr do the work for you
httr::content_type_json(), # easier than making a header yourself
httr::verbose()
)
es_credential = credential
list_cont <- extract.query(es_credential = credential, query)
# es_query = query
es_request <-
httr::POST(
url = es_credential,
body = es_query,
httr::timeout(10000),
encode = "raw", # this lets' httr do the work for you
httr::content_type_json(), # easier than making a header yourself
httr::verbose()
)
es_credential
es_query
# es_query = query
es_request <-
httr::POST(
url = es_credential,
body = es_query,
httr::timeout(10000),
encode = "raw", # this lets' httr do the work for you
httr::content_type_json(), # easier than making a header yourself
httr::verbose()
)
list_cont <- httr::content(es_request, as = "text")
es_data <- jsonlite::fromJSON(list_cont)
es_data
list_cont <- extract.query(es_credential = credential, query = query)
list_cont <- extract.query(es_credential = credential, es_query = query)
extract.query(es_credential = credential, es_query = query)
extract.query <- function(es_credential,
es_query){
# es_query = query
es_request <-
httr::POST(
url = es_credential,
body = es_query,
httr::timeout(10000),
encode = "raw", # this lets' httr do the work for you
httr::content_type_json(), # easier than making a header yourself
httr::verbose()
)
list_cont <- httr::content(es_request, as = "text")
es_data <- jsonlite::fromJSON(list_cont)
return(es_data)
}
list_cont <- extract.query(es_credential = credential, es_query = query)
list_cont
devtools::load_all()
devtools::document()
# devtools::create(path = "/home/gabriel/suporte/ciencia_de_dados/projeto/ElasticFantasticR/elasticR")
require(dplyr)
credential_realties <-
es.credential(
user = "normalizador",
passwd = "ND2SjGE+41E=@",
find_search = "search", # I need to find a reason
database =  "mapi.digital",
table =  "realties"
)
es.connection(credential_realties) %>%
.$status
# elasticR::extract.query()
elasticR::es.alldata(
credential  = credential_realties,
size = 100
)
# elasticR::extract.query()
elasticR::es.alldata(
credential  = credential_realties,
size = 100
)
devtools::document()
devtools::create(path = "/home/gabriel/suporte/ciencia_de_dados/projeto/ElasticFantasticR/elasticR")
